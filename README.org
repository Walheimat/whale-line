* whale-line

#+BEGIN_HTML
<a href='https://coveralls.io/github/Walheimat/whale-line?branch=trunk'>
    <img
        src='https://coveralls.io/repos/github/Walheimat/whale-line/badge.svg?branch=trunk'
        alt='Coverage Status'
    />
</a>
#+END_HTML

This package provides a highly modular mode-line. The =whale-line=
mode-line comprises a set of segments. Each of them can be freely
positioned or disabled by setting =whale-line-segments= (segments
belong either to the left or the right side). Many are customizable.

You can also create augments to change the behavior or look of an
existing segment.

You may also create your own segments and augments using the
=whale-line-create-*= macros.

This package takes inspiration from two other great custom mode-lines:
=mood-line= and =doom-modeline=.

** Installation

If you use =straight= or =quelpa=, you know what to do.

If you're on Emacs >29, I recommend using =package-vc-install=.

Alternatively, provided you have Cask, you can install the package
with =make package-install=.

** Configuration

The position and order of the segments can be controlled by
customizing =whale-line-segments=. You can freely re-arrange them,
leave some out, add your custom ones.

If you move, add or remove a segment after loading the package, you
will need to call =whale-line-rebuild=.

#+BEGIN_SRC emacs-lisp
(use-package whale-line
  :config
  (whale-line-mode +1)

  :custom
  (whale-line-segments '(major-mode
                         buffer-identification
                         org
                         buffer-status
                         position
                         lsp
                         dap
                         selection
                         process
                         window-status
                         | ;; Divides into left and right.
                         misc-info
                         minor-modes
                         partial-recall
                         project
                         vc
                         tab-bar
                         animation))

  ;; Strategy to use when there's not enough space to render all segments.
  (whale-line-segment-strategy 'prioritize) ; Other options are `elide' and `ignore'.

  ;; Animation.
  (whale-line-segments-animation-key-frames [
                                             "   "
                                             ".  "
                                             ".. "
                                             "..."
                                             " .."
                                             "  ."
                                             ])
  (whale-line-segments-animation-speed 0.4)

  ;; Org.
  (whale-line-segments-org-separator ">")
  (whale-line-segments-org-ellispis "â€¦")
  (whale-line-segments-org-elision "*")
  (whale-line-segments-org-max-count 2)
  (whale-line-segments-org-max-heading-length 12)

  ;; Specs for used icons.
  (whale-line-iconify-specs '((project . (:name "package" :font octicon :face whale-line-emphasis))
                              (vc . (:name "code-fork"))
                              (dap . (:name "bug"))
                              (buffer-read-only . (:name "lock" :face whale-line-contrast :fallback "@"))
                              (buffer-file-name . (:name "sticky-note-o" :face whale-line-shadow :fallback "&"))
                              (buffer-modified . (:name "pencil" :face whale-line-emphasis :fallback "*"))
                              (window-dedicated . (:name "link" :face whale-line-shadow :fallback "^"))
                              (buffer-fallback . (:name "question-circle" :face whale-line-contrast :no-defaults t))
                              (lsp . (:name "server" :face whale-line-contrast))
                              (partial-recall . (:name "tag" :face whale-line-contrast))))


  ;; List of icons to disable.
  (whale-line-iconify-disabled nil))
#+END_SRC

** Customizing Priorities

All segments are created with a priority that determines whether it is
shown. The possible values are:

- =t= to always show
- =current= to always show for the selected window
- =current-low= to show for current window if space allows it
- =low= to show if space allows it

If you're unhappy with these settings, you can use
=whale-line-with-priorities= to change them in bulk.

#+begin_src emacs-lisp
(whale-line-with-priorities
  ;; Make `major-mode' and `buffer-status' segment show only for
  ;; current window.
  major-mode
  buffer-status
  current

  ;; Make `project' segment show only if space allows it.
  project
  low

  ;; Always show `lsp' segment.
  lsp
  t)
#+end_src

** Custom Segments

You may create your own segments using macros
=whale-line-create-stateless-segment=,
=whale-line-create-stateful-segment= and =whale-line-create-augment=.
/Note/ however that their signature is not stable and may change at
any time.

Be sure to add you segment to =whale-line-segments= at the desired
position.

** Example Screenshot

Modeline in a split frame (theme is =doom-vibrant=).

[[file:assets/mode-line.png]]

On the left window, the segment son the left are

- =major-mode= (using =all-the-icons=)
- =buffer-identification=
- =flycheck= augmenting the prior to indicate errors and warnings
- =org= segment to show the current top heading and its parent
- =buffer-status= segment to indicate the buffer is edited

Not shown are segments for =lsp-mode=, =dap-mode= and =window-status=
that each show an icon when they're active. Also not shown is
=process= that shows =mode-line-process=

On the right you can see

- =minor-mode-alist= segment augmented by =minions=
- =partial-recall= segment (one of my packages)
- =project= segment
- =vc= segment
- =tab-bar= segment
- =animation= segment

Not shown is the =misc-info= segment that shows =mode-line-misc-info=.

The right window shows fewer segments. That's because many segments
are defined to only show on the current window or if space isn't
tight.
